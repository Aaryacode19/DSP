//17.WAP of Implementation of DFS in C

#include <stdio.h>

#define MAX 10

int graph[MAX][MAX], visited[MAX];

// Function to perform Depth First Search (DFS)
void dfs(int vertex, int n) {
    // Print the current vertex and mark it as visited
    printf("%d ", vertex);
    visited[vertex] = 1; // Mark the vertex as visited

    // Visit all the unvisited adjacent vertices
    for (int i = 0; i < n; i++) {
        // If there is an edge from 'vertex' to 'i' and 'i' is not visited
        if (graph[vertex][i] == 1 && !visited[i]) {
            // Recursively perform DFS on the adjacent vertex
            dfs(i, n);
        }
    }
}

int main() {
    int n, edges, u, v;

    // Input the number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // Initialize visited array to 0 (unvisited vertices)
    for (int i = 0; i < n; i++) visited[i] = 0;

    // Input the number of edges
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Initialize the graph with 0 (no edges)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            graph[i][j] = 0;
        }
    }

    // Input the edges for the graph
    for (int i = 0; i < edges; i++) {
        printf("Enter edge (u v): ");
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;  // Add edge u -> v
        graph[v][u] = 1;  // Add edge v -> u (since the graph is undirected)
    }

    // Perform DFS traversal starting from vertex 0
    printf("DFS traversal starting from vertex 0:\n");
    dfs(0, n);  // Start DFS from vertex 0

    return 0;
}
