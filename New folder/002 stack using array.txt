#include <stdio.h>
#define MAX 5 // Define the maximum size of the stack

int stack[MAX], top = -1; // Initialize stack and set the top pointer to -1 (indicating empty stack)

// Push operation: Adds an element to the top of the stack
void push(int value) {
    if (top == MAX - 1) // Check for stack overflow (stack is full)
        printf("Stack Overflow\n");
    else
        stack[++top] = value; // Increment top and insert the value at the top
}

// Pop operation: Removes and returns the top element of the stack
int pop() {
    if (top == -1) { // Check for stack underflow (stack is empty)
        printf("Stack Underflow\n");
    } else {
        return stack[top--]; // Return the top element and decrement the top pointer
    }
    return -1; // Return -1 if stack is empty
}

// Display operation: Prints all the elements in the stack
void display() {
    if (top == -1) // Check if the stack is empty
        printf("Stack is empty\n");
    else {
        printf("Stack: "); // Print all stack elements
        for (int i = 0; i <= top; i++) // Traverse from bottom to top
            printf("%d ", stack[i]);
        printf("\n");
    }
}

int main() {
    push(10); // Push 10 onto the stack
    push(20); // Push 20 onto the stack
    push(30); // Push 30 onto the stack
    display(); // Output the current stack: Stack: 10 20 30

    printf("Popped: %d\n", pop()); // Pop the top element (30) and display it
    display(); // Output the current stack after pop: Stack: 10 20

    return 0; // End of the program
}
